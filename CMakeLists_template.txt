cmake_minimum_required(VERSION 3.0)

project()

# execute_process(COMMAND sh "${CMAKE_SOURCE_DIR}/scripts/generate_version_file.sh ${PROJECT_NAME} ${CMAKE_SOURCE_DIR}/src" WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/scripts)
include(${CMAKE_SOURCE_DIR}/cmake/generate_version_file.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/common_base_setting.cmake)

# base setting
if (NOT DEFINED PROGRAM_TARGET_NAME)
    set(PROGRAM_TARGET_NAME ${PROJECT_NAME})
endif()
message(STATUS, ${PROGRAM_TARGET_NAME})

set(PATH_DPD_INCLUDE $ENV{DROOT}/include)
set(PATH_DPD_LIBRARY $ENV{DROOT}/lib)
message(STATUS, ${PATH_DPD_INCLUDE})
message(STATUS, ${PATH_DPD_LIBRARY})

include_directories(${PATH_DPD_INCLUDE})
link_directories(${PATH_DPD_LIBRARY})

## link library list
if (TARGET_PLATFORM AND (TARGET_PLATFORM STREQUAL ""))
    set(LINK_LIB_LIST 
        
    )
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w -Wno-invalid-offsetof -fvisibility=hidden --no-gnu-unique")
    
elseif (TARGET_PLATFORM AND (TARGET_PLATFORM STREQUAL ""))
    set(LINK_LIB_LIST 
        
    )
    
else()
    set(LINK_LIB_LIST 
        
    )
    
endif()

## source code
aux_source_directory(./src PROJEST_SOURCES)
### other methods
# set(PROJEST_SOURCES 
#   enumerate the files here
#   ) 
message(STATUS, ${PROJEST_SOURCES})

## compile option
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -pthread -Wl,-rpath=.") # -Wl,-Bsymbolic -Wno-invalid-offsetof -fvisibility=hidden --no-gnu-unique -fsanitize=address
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wl,-rpath=. -Wl,-Bsymbolic -fvisibility=hidden")

if (BUILD_EXECUTABLE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    
    add_executable(${PROGRAM_TARGET_NAME} ${PROJEST_SOURCES})
else() 
    if (BUILD_SHARED_LIBS)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        add_library(${PROGRAM_TARGET_NAME} SHARED ${PROJEST_SOURCES})
        
    else()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
        add_library(${PROGRAM_TARGET_NAME} STATIC ${PROJEST_SOURCES})
        
    endif() # if (BUILD_SHARED_LIBS)
endif() # if (BUILD_EXECUTABLE)

message(STATUS "CMAKE_C_FLAGS: ${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")

target_link_libraries(${PROGRAM_TARGET_NAME} ${LINK_LIB_LIST})

## install
install(TARGETS ${PROGRAM_TARGET_NAME}
        LIBRARY DESTINATION lib  # shared library install path
        ARCHIVE DESTINATION lib  # static library install path
        RUNTIME DESTINATION bin  # executable program install path
        PUBLIC_HEADER DESTINATION include    # header files install path
        )